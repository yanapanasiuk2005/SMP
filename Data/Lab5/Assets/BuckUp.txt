import sys, math


class Cube:
    def __init__(self, w=80, h=24, scale=1.0, shift=(0, 0, 0)):
        self.w, self.h = w, h
        self.out = sys.stdout

        # Cube vertices
        self.cube = [(x, y, z) for x in (-1, 1) for y in (-1, 1) for z in (-1, 1)]

        # Rotation values (angle in radians, initially set to 0)
        self.angle_x = 0.0  # X-axis
        self.angle_y = 0.0  # Y-axis
        self.angle_z = 0.0  # Z-axis

        # Projection scaling and translation
        self.scale_factor = scale
        self.shift = shift

        # Magnification for display projection
        self.ym = h / 3
        self.xm = 2 * self.ym

        # Define edges of the cube as pairs of vertices
        self.edges = [
            (0, 1), (1, 3), (3, 2), (2, 0),  # Bottom square
            (4, 5), (5, 7), (7, 6), (6, 4),  # Top square
            (0, 4), (1, 5), (2, 6), (3, 7)  # Connecting edges
        ]

    def scale(self, factor):
        """Scales the cube by a factor."""
        self.scale_factor = factor

    def shift_cube(self, dx, dy, dz):
        """Shifts the cube by (dx, dy, dz)."""
        self.shift = (dx, dy, dz)

    def rotate(self):
        """Rotates the cube around the selected axes."""
        # Apply rotation around X-axis
        self.cube = [
            (x,
             y * math.cos(self.angle_x) - z * math.sin(self.angle_x),
             y * math.sin(self.angle_x) + z * math.cos(self.angle_x))
            for x, y, z in self.cube
        ]
        # Apply rotation around Y-axis
        self.cube = [
            (x * math.cos(self.angle_y) + z * math.sin(self.angle_y),
             y,
             -x * math.sin(self.angle_y) + z * math.cos(self.angle_y))
            for x, y, z in self.cube
        ]
        # Apply rotation around Z-axis
        self.cube = [
            (x * math.cos(self.angle_z) - y * math.sin(self.angle_z),
             x * math.sin(self.angle_z) + y * math.cos(self.angle_z),
             z)
            for x, y, z in self.cube
        ]

    def project(self):
        """Projects the 3D cube onto 2D plane."""
        # Apply scaling and shifting
        projected = [
            (round(self.w / 2 + self.xm * (x * self.scale_factor + self.shift[0]) / (z + 2 + self.shift[2])),
             round(self.h / 2 + self.ym * (y * self.scale_factor + self.shift[1]) / (z + 2 + self.shift[2])))
            for x, y, z in self.cube
        ]
        return projected

    def draw(self):
        """Draws the cube on the terminal."""
        proj = self.project()

        # Interpolate and draw the edges
        for edge in self.edges:
            start = proj[edge[0]]
            end = proj[edge[1]]
            for i in range(1, 9):  # Interpolate between start and end for smoother lines
                x = start[0] + i * (end[0] - start[0]) // 10
                y = start[1] + i * (end[1] - start[1]) // 10
                proj.append((x, y))

        self.out.write('\033[H' + '\n'.join(
            ''.join(('*' if (x, y) in proj else ' ') for x in range(self.w))
            for y in range(self.h)))
        self.out.flush()

    def set_rotation_angle(self, angle, axis):
        """Sets the rotation angle for a specified axis."""
        radians = math.radians(angle)
        if axis == 'x':
            self.angle_x = radians
        elif axis == 'y':
            self.angle_y = radians
        elif axis == 'z':
            self.angle_z = radians


def display_menu():
    print("\n--- Cube Rotation Menu ---")
    print("1. Select Rotation Axis (X, Y, Z)")
    print("2. Set Rotation Angle (in degrees)")
    print("3. Display Cube")
    print("4. Exit")


def main():
    cube = Cube(scale=1.0)
    axis = 'y'  # Default axis
    angle = 0  # Default angle in degrees

    while True:
        display_menu()
        choice = input("Select an option (1-4): ")

        if choice == '1':
            axis = input("Enter rotation axis (x, y, or z): ").lower()
            if axis not in ['x', 'y', 'z']:
                print("Invalid axis! Please choose x, y, or z.")
                continue

        elif choice == '2':
            try:
                angle = float(input(f"Enter rotation angle in degrees for {axis}-axis: "))
                cube.set_rotation_angle(angle, axis)
            except ValueError:
                print("Invalid angle! Please enter a numeric value.")

        elif choice == '3':
            print(f"Displaying cube rotated by {angle} degrees around {axis}-axis.")
            cube.rotate()  # Apply the rotation once
            cube.draw()  # Draw the cube once

        elif choice == '4':
            print("Exiting...")
            break

        else:
            print("Invalid choice! Please select a valid option.")


if __name__ == '__main__':
    main()